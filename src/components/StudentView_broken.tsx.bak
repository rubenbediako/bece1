import React, { useState, useRef } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Chip,
  IconButton,
  Divider,
  TextField,
  Paper,
  ButtonGroup,
  Tooltip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import {
  ArrowLeft,
  Play,
  BookOpen,
  Calculator,
  Function,
  Sigma,
  Pi,
  Square,
  Divide,
  ChevronDown,
  Edit,
  Trash2,
} from 'lucide-react';
import { motion } from 'framer-motion';
import 'katex/dist/katex.min.css';

interface Subject {
  id: string;
  name: string;
  description: string;
}

interface Topic {
  id: string;
  subjectId: string;
  name: string;
  description: string;
}

interface Question {
  id: string;
  subjectId: string;
  topicId: string;
  question: string;
  type: 'multiple-choice' | 'short-answer' | 'essay' | 'practical';
  options?: string[];
  correctAnswer: string;
  explanation: string;
  solution: string;
  difficulty: 'easy' | 'medium' | 'hard';
  points: number;
}

interface PredictedTopic {
  id: string;
  subjectId: string;
  topicId: string;
  probability: number;
  reasoning: string;
  isActive: boolean;
}

interface StudentViewProps {
  subjects: Subject[];
  topics: Topic[];
  questions: Question[];
  predictedTopics: PredictedTopic[];
}

interface MathSymbol {
  symbol: string;
  latex: string;
  category: string;
  description: string;
}

const mathSymbols: MathSymbol[] = [
  // Basic Operations
  { symbol: '+', latex: '+', category: 'basic', description: 'Addition' },
  { symbol: '−', latex: '-', category: 'basic', description: 'Subtraction' },
  { symbol: '×', latex: '\\times', category: 'basic', description: 'Multiplication' },
  { symbol: '÷', latex: '\\div', category: 'basic', description: 'Division' },
  { symbol: '=', latex: '=', category: 'basic', description: 'Equals' },
  { symbol: '≠', latex: '\\neq', category: 'basic', description: 'Not equal' },
  { symbol: '≈', latex: '\\approx', category: 'basic', description: 'Approximately equal' },
  
  // Fractions and Powers
  { symbol: '½', latex: '\\frac{1}{2}', category: 'fractions', description: 'One half' },
  { symbol: '¼', latex: '\\frac{1}{4}', category: 'fractions', description: 'One quarter' },
  { symbol: '¾', latex: '\\frac{3}{4}', category: 'fractions', description: 'Three quarters' },
  { symbol: 'x²', latex: 'x^2', category: 'powers', description: 'Square' },
  { symbol: 'x³', latex: 'x^3', category: 'powers', description: 'Cube' },
  { symbol: 'xⁿ', latex: 'x^n', category: 'powers', description: 'Power' },
  { symbol: '√x', latex: '\\sqrt{x}', category: 'powers', description: 'Square root' },
  { symbol: '∛x', latex: '\\sqrt[3]{x}', category: 'powers', description: 'Cube root' },
  
  // Algebra
  { symbol: '±', latex: '\\pm', category: 'algebra', description: 'Plus or minus' },
  { symbol: '∝', latex: '\\propto', category: 'algebra', description: 'Proportional to' },
  { symbol: '∞', latex: '\\infty', category: 'algebra', description: 'Infinity' },
  { symbol: '∑', latex: '\\sum', category: 'algebra', description: 'Sum' },
  { symbol: '∏', latex: '\\prod', category: 'algebra', description: 'Product' },
  
  // Geometry
  { symbol: '∠', latex: '\\angle', category: 'geometry', description: 'Angle' },
  { symbol: '△', latex: '\\triangle', category: 'geometry', description: 'Triangle' },
  { symbol: '⊥', latex: '\\perp', category: 'geometry', description: 'Perpendicular' },
  { symbol: '∥', latex: '\\parallel', category: 'geometry', description: 'Parallel' },
  { symbol: '°', latex: '^\\circ', category: 'geometry', description: 'Degree' },
  { symbol: 'π', latex: '\\pi', category: 'geometry', description: 'Pi' },
  
  // Inequalities
  { symbol: '<', latex: '<', category: 'inequalities', description: 'Less than' },
  { symbol: '>', latex: '>', category: 'inequalities', description: 'Greater than' },
  { symbol: '≤', latex: '\\leq', category: 'inequalities', description: 'Less than or equal' },
  { symbol: '≥', latex: '\\geq', category: 'inequalities', description: 'Greater than or equal' },
  
  // Functions
  { symbol: 'sin', latex: '\\sin', category: 'functions', description: 'Sine' },
  { symbol: 'cos', latex: '\\cos', category: 'functions', description: 'Cosine' },
  { symbol: 'tan', latex: '\\tan', category: 'functions', description: 'Tangent' },
  { symbol: 'log', latex: '\\log', category: 'functions', description: 'Logarithm' },
  { symbol: 'ln', latex: '\\ln', category: 'functions', description: 'Natural logarithm' },
];

const MathTextEditor: React.FC<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}> = ({ value, onChange, placeholder = 'Enter your mathematical expression...' }) => {
  const [showSymbols, setShowSymbols] = useState(false);
  const [activeCategory, setActiveCategory] = useState('basic');
  const textFieldRef = useRef<HTMLInputElement>(null);

  // Simple math renderer component
const MathRenderer: React.FC<{ math: string }> = ({ math }) => {
  try {
    return (
      <span 
        dangerouslySetInnerHTML={{ 
          __html: math.replace(/\\/g, '') 
        }} 
        style={{ fontFamily: 'monospace', fontSize: '1.1em' }}
      />
    );
  } catch {
    return <span style={{ fontFamily: 'monospace' }}>{math}</span>;
  }
};

const categories = [
  { id: 'basic', name: 'Basic', icon: <Calculator size={16} /> },
  { id: 'fractions', name: 'Fractions', icon: <Divide size={16} /> },
  { id: 'powers', name: 'Powers', icon: <Square size={16} /> },
  { id: 'algebra', name: 'Algebra', icon: <Function size={16} /> },
  { id: 'geometry', name: 'Geometry', icon: <Square size={16} /> },
  { id: 'inequalities', name: 'Inequalities', icon: <Sigma size={16} /> },
  { id: 'functions', name: 'Functions', icon: <Pi size={16} /> },
];

  const insertSymbol = (latex: string) => {
    if (textFieldRef.current) {
      const input = textFieldRef.current;
      const start = input.selectionStart || 0;
      const end = input.selectionEnd || 0;
      const newValue = value.substring(0, start) + latex + value.substring(end);
      onChange(newValue);
      
      // Set cursor position after the inserted symbol
      setTimeout(() => {
        const newPosition = start + latex.length;
        input.setSelectionRange(newPosition, newPosition);
        input.focus();
      }, 0);
    }
  };

  const insertFraction = () => {
    insertSymbol('\\frac{numerator}{denominator}');
  };

  const insertPower = () => {
    insertSymbol('^{exponent}');
  };

  const insertSqrt = () => {
    insertSymbol('\\sqrt{expression}');
  };

  const clearEditor = () => {
    onChange('');
    if (textFieldRef.current) {
      textFieldRef.current.focus();
    }
  };

  const filteredSymbols = mathSymbols.filter(symbol => symbol.category === activeCategory);

  return (
    <Paper elevation={2} sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Edit size={20} />
        Math Expression Editor
      </Typography>
      
      {/* Main input field */}
      <TextField
        fullWidth
        multiline
        rows={3}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        inputRef={textFieldRef}
        sx={{ mb: 2 }}
        variant="outlined"
      />

      {/* Math Preview */}
      {value && (
        <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
          <Typography variant="subtitle2" gutterBottom>
            Preview:
          </Typography>
          <Box sx={{ minHeight: 40, display: 'flex', alignItems: 'center' }}>
            <MathRenderer math={value} />
          </Box>
        </Box>
      )}

      {/* Quick action buttons */}
      <Box sx={{ mb: 2 }}>
        <ButtonGroup variant="outlined" size="small" sx={{ mb: 1, mr: 1 }}>
          <Tooltip title="Insert Fraction">
            <Button onClick={insertFraction} startIcon={<Divide size={16} />}>
              Fraction
            </Button>
          </Tooltip>
          <Tooltip title="Insert Power">
            <Button onClick={insertPower} startIcon={<SquareRoot size={16} />}>
              Power
            </Button>
          </Tooltip>
          <Tooltip title="Insert Square Root">
            <Button onClick={insertSqrt} startIcon={<SquareRoot size={16} />}>
              √
            </Button>
          </Tooltip>
        </ButtonGroup>
        
        <ButtonGroup variant="outlined" size="small" sx={{ mb: 1 }}>
          <Tooltip title="Show/Hide Symbol Palette">
            <Button 
              onClick={() => setShowSymbols(!showSymbols)}
              variant={showSymbols ? "contained" : "outlined"}
              startIcon={<Sigma size={16} />}
            >
              Symbols
            </Button>
          </Tooltip>
          <Tooltip title="Clear Editor">
            <Button onClick={clearEditor} startIcon={<Trash2 size={16} />}>
              Clear
            </Button>
          </Tooltip>
        </ButtonGroup>
      </Box>

      {/* Symbol palette */}
      {showSymbols && (
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon={<ChevronDown />}>
            <Typography variant="subtitle2">Mathematical Symbols</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {/* Category tabs */}
            <Box sx={{ mb: 2 }}>
              <ButtonGroup variant="outlined" size="small" sx={{ flexWrap: 'wrap' }}>
                {categories.map((category) => (
                  <Button
                    key={category.id}
                    onClick={() => setActiveCategory(category.id)}
                    variant={activeCategory === category.id ? "contained" : "outlined"}
                    startIcon={category.icon}
                    sx={{ mb: 1 }}
                  >
                    {category.name}
                  </Button>
                ))}
              </ButtonGroup>
            </Box>

            {/* Symbol grid */}
            <Grid container spacing={1}>
              {filteredSymbols.map((symbol, index) => (
                <Grid item key={index}>
                  <Tooltip title={`${symbol.description} (${symbol.latex})`}>
                    <Button
                      variant="outlined"
                      onClick={() => insertSymbol(symbol.latex)}
                      sx={{ 
                        minWidth: 50, 
                        height: 50,
                        fontSize: '1.2em',
                        fontFamily: 'monospace'
                      }}
                    >
                      {symbol.symbol}
                    </Button>
                  </Tooltip>
                </Grid>
              ))}
            </Grid>
          </AccordionDetails>
        </Accordion>
      )}

      {/* Common expressions templates */}
      <Accordion>
        <AccordionSummary expandIcon={<ChevronDown />}>
          <Typography variant="subtitle2">Common Templates</Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Grid container spacing={1}>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('\\frac{a}{b}')}
              >
                Fraction: a/b
              </Button>
            </Grid>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('ax^2 + bx + c = 0')}
              >
                Quadratic
              </Button>
            </Grid>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('\\sqrt{a^2 + b^2}')}
              >
                Pythagorean
              </Button>
            </Grid>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('\\sin(\\theta)')}
              >
                Sine
              </Button>
            </Grid>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('\\lim_{x \\to 0}')}
              >
                Limit
              </Button>
            </Grid>
            <Grid item>
              <Button 
                variant="outlined" 
                size="small"
                onClick={() => insertSymbol('\\int_a^b f(x) dx')}
              >
                Integral
              </Button>
            </Grid>
          </Grid>
        </AccordionDetails>
      </Accordion>
    </Paper>
  );
};

const StudentView: React.FC<StudentViewProps> = ({
  subjects,
  topics,
  questions,
  predictedTopics,
}) => {
  const [selectedSubject, setSelectedSubject] = useState<Subject | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [selectedQuestion, setSelectedQuestion] = useState<Question | null>(null);
  const [showAnswer, setShowAnswer] = useState(false);
  const [mathExpression, setMathExpression] = useState('');
  const [showMathEditor, setShowMathEditor] = useState(false);

  const handleBackToSubjects = () => {
    setSelectedSubject(null);
    setSelectedTopic(null);
    setSelectedQuestion(null);
    setShowAnswer(false);
  };

  const handleBackToTopics = () => {
    setSelectedTopic(null);
    setSelectedQuestion(null);
    setShowAnswer(false);
  };

  const handleBackToQuestions = () => {
    setSelectedQuestion(null);
    setShowAnswer(false);
  };

  const handlePlayPodcast = () => {
    // Mock podcast functionality
    alert('🎧 Playing podcast explanation... (This is a demo - real podcast integration would be implemented here)');
  };

  const getPredictedTopicsForSubject = (subjectId: string) => {
    return predictedTopics
      .filter(pt => pt.subjectId === subjectId && pt.isActive)
      .map(pt => ({
        ...topics.find(t => t.id === pt.topicId)!,
        probability: pt.probability,
        reasoning: pt.reasoning,
      }))
      .sort((a, b) => b.probability - a.probability);
  };

  const getQuestionsForTopic = (topicId: string) => {
    return questions.filter(q => q.topicId === topicId);
  };

  // Subject Selection View
  if (!selectedSubject) {
    return (
      <Box>
        <Typography variant="h4" gutterBottom sx={{ mb: 4, textAlign: 'center' }}>
          🎓 BECE 2026 Exam Prediction
        </Typography>
        
        <Typography variant="h6" gutterBottom sx={{ mb: 3 }}>
          Select a Subject to Start:
        </Typography>

        <Grid container spacing={3}>
          {subjects.map((subject) => {
            const predictedTopicsCount = getPredictedTopicsForSubject(subject.id).length;
            const questionsCount = questions.filter(q => q.subjectId === subject.id).length;
            
            return (
              <Grid item xs={12} sm={6} md={4} key={subject.id}>
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Card 
                    sx={{ 
                      cursor: 'pointer', 
                      height: '100%',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        boxShadow: 8,
                        bgcolor: 'primary.main',
                        color: 'white',
                        '& .MuiChip-root': {
                          bgcolor: 'white',
                          color: 'primary.main'
                        }
                      }
                    }}
                    onClick={() => setSelectedSubject(subject)}
                  >
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                        <Typography variant="h6" component="h2">
                          {subject.name}
                        </Typography>
                        <BookOpen size={24} />
                      </Box>
                      
                      <Typography variant="body2" sx={{ mb: 2, minHeight: 40 }}>
                        {subject.description}
                      </Typography>
                      
                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        <Chip 
                          label={`${predictedTopicsCount} Predictions`} 
                          size="small" 
                          color="primary"
                        />
                        <Chip 
                          label={`${questionsCount} Questions`} 
                          size="small" 
                          variant="outlined"
                        />
                      </Box>
                    </CardContent>
                  </Card>
                </motion.div>
              </Grid>
            );
          })}
        </Grid>

        {/* Math Editor Section */}
        <Box sx={{ mt: 6 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 3 }}>
            <Typography variant="h5">🧮 Math Practice Zone</Typography>
            <Button 
              variant={showMathEditor ? "contained" : "outlined"}
              onClick={() => setShowMathEditor(!showMathEditor)}
              startIcon={<Calculator />}
            >
              {showMathEditor ? 'Hide' : 'Show'} Math Editor
            </Button>
          </Box>

          {showMathEditor && (
            <MathTextEditor 
              value={mathExpression}
              onChange={setMathExpression}
              placeholder="Practice writing mathematical expressions here..."
            />
          )}
        </Box>
      </Box>
    );
  }

  // Topic Selection View
  if (!selectedTopic) {
    const predictedTopics = getPredictedTopicsForSubject(selectedSubject.id);
    
    return (
      <Box>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
          <IconButton onClick={handleBackToSubjects}>
            <ArrowLeft />
          </IconButton>
          <Typography variant="h4">
            {selectedSubject.name} - Predicted Topics
          </Typography>
        </Box>

        {predictedTopics.length === 0 ? (
          <Typography variant="h6" sx={{ textAlign: 'center', color: 'text.secondary', mt: 4 }}>
            No predictions available for this subject yet.
          </Typography>
        ) : (
          <Grid container spacing={3}>
            {predictedTopics.map((topic) => {
              const questionsCount = getQuestionsForTopic(topic.id).length;
              
              return (
                <Grid item xs={12} md={6} key={topic.id}>
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Card 
                      sx={{ 
                        cursor: 'pointer',
                        height: '100%',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          boxShadow: 6,
                          bgcolor: 'success.main',
                          color: 'white',
                          '& .MuiChip-root': {
                            bgcolor: 'white',
                            color: 'success.main'
                          }
                        }
                      }}
                      onClick={() => setSelectedTopic(topic)}
                    >
                      <CardContent>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                          <Typography variant="h6">
                            {topic.name}
                          </Typography>
                          <Chip 
                            label={`${topic.probability}%`}
                            color={topic.probability >= 80 ? 'error' : topic.probability >= 70 ? 'warning' : 'info'}
                            sx={{ fontWeight: 'bold' }}
                          />
                        </Box>
                        
                        <Typography variant="body2" sx={{ mb: 2, minHeight: 40 }}>
                          {topic.description}
                        </Typography>
                        
                        <Typography variant="caption" sx={{ 
                          display: 'block', 
                          mb: 2, 
                          fontStyle: 'italic',
                          bgcolor: 'grey.100',
                          p: 1,
                          borderRadius: 1
                        }}>
                          💡 {topic.reasoning}
                        </Typography>
                        
                        <Chip 
                          label={`${questionsCount} Practice Questions`}
                          size="small"
                          variant="outlined"
                        />
                      </CardContent>
                    </Card>
                  </motion.div>
                </Grid>
              );
            })}
          </Grid>
        )}
      </Box>
    );
  }

  // Question Selection View
  if (!selectedQuestion) {
    const topicQuestions = getQuestionsForTopic(selectedTopic.id);
    
    return (
      <Box>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
          <IconButton onClick={handleBackToTopics}>
            <ArrowLeft />
          </IconButton>
          <Typography variant="h4">
            {selectedTopic.name} - Practice Questions
          </Typography>
        </Box>

        {topicQuestions.length === 0 ? (
          <Typography variant="h6" sx={{ textAlign: 'center', color: 'text.secondary', mt: 4 }}>
            No questions available for this topic yet.
          </Typography>
        ) : (
          <Grid container spacing={3}>
            {topicQuestions.map((question, index) => (
              <Grid item xs={12} key={question.id}>
                <motion.div
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                >
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        boxShadow: 4,
                        bgcolor: 'info.main',
                        color: 'white',
                        '& .MuiChip-root': {
                          bgcolor: 'white',
                          color: 'info.main'
                        }
                      }
                    }}
                    onClick={() => setSelectedQuestion(question)}
                  >
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                        <Typography variant="h6">
                          Question {index + 1}
                        </Typography>
                        <Box sx={{ display: 'flex', gap: 1 }}>
                          <Chip 
                            label={question.difficulty}
                            color={
                              question.difficulty === 'hard' ? 'error' : 
                              question.difficulty === 'medium' ? 'warning' : 'success'
                            }
                            size="small"
                          />
                          <Chip 
                            label={`${question.points} pts`}
                            variant="outlined"
                            size="small"
                          />
                        </Box>
                      </Box>
                      
                      <Typography variant="body1" sx={{ mb: 2 }}>
                        {question.question}
                      </Typography>
                      
                      {question.type === 'multiple-choice' && question.options && (
                        <Box>
                          <Typography variant="subtitle2" sx={{ mb: 1 }}>Options:</Typography>
                          {question.options.map((option, optIndex) => (
                            <Typography key={optIndex} variant="body2" sx={{ ml: 2 }}>
                              {String.fromCharCode(65 + optIndex)}. {option}
                            </Typography>
                          ))}
                        </Box>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              </Grid>
            ))}
          </Grid>
        )}
      </Box>
    );
  }

  // Question Detail View
  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
        <IconButton onClick={handleBackToQuestions}>
          <ArrowLeft />
        </IconButton>
        <Typography variant="h4">
          Question Details
        </Typography>
      </Box>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
            <Typography variant="h5" gutterBottom>
              {selectedQuestion.question}
            </Typography>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Chip 
                label={selectedQuestion.difficulty}
                color={
                  selectedQuestion.difficulty === 'hard' ? 'error' : 
                  selectedQuestion.difficulty === 'medium' ? 'warning' : 'success'
                }
              />
              <Chip 
                label={`${selectedQuestion.points} points`}
                variant="outlined"
              />
            </Box>
          </Box>

          {selectedQuestion.type === 'multiple-choice' && selectedQuestion.options && (
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" gutterBottom>Options:</Typography>
              <Grid container spacing={2}>
                {selectedQuestion.options.map((option, index) => (
                  <Grid item xs={12} sm={6} key={index}>
                    <Paper 
                      sx={{ 
                        p: 2, 
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        '&:hover': { bgcolor: 'grey.100' }
                      }}
                    >
                      <Typography>
                        <strong>{String.fromCharCode(65 + index)}.</strong> {option}
                      </Typography>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}

          <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>
            <Button
              variant="contained"
              onClick={() => setShowAnswer(!showAnswer)}
              startIcon={showAnswer ? <BookOpen /> : <BookOpen />}
            >
              {showAnswer ? 'Hide Answer' : 'Show Answer'}
            </Button>
            <Button
              variant="outlined"
              onClick={handlePlayPodcast}
              startIcon={<Play />}
            >
              Play Podcast Explanation
            </Button>
          </Box>

          {showAnswer && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              transition={{ duration: 0.3 }}
            >
              <Divider sx={{ my: 3 }} />
              
              <Typography variant="h6" gutterBottom color="success.main">
                ✅ Correct Answer: {selectedQuestion.correctAnswer}
              </Typography>
              
              <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
                Explanation:
              </Typography>
              <Typography variant="body1" sx={{ mb: 3, bgcolor: 'info.50', p: 2, borderRadius: 1 }}>
                {selectedQuestion.explanation}
              </Typography>
              
              <Typography variant="h6" gutterBottom>
                Detailed Solution:
              </Typography>
              <Paper sx={{ p: 3, bgcolor: 'grey.50' }}>
                <Typography variant="body1" sx={{ whiteSpace: 'pre-line' }}>
                  {selectedQuestion.solution}
                </Typography>
              </Paper>
            </motion.div>
          )}
        </CardContent>
      </Card>

      {/* Math Editor for working out solutions */}
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            📝 Work Out Your Solution:
          </Typography>
          <MathTextEditor 
            value={mathExpression}
            onChange={setMathExpression}
            placeholder="Show your working here using mathematical notation..."
          />
        </CardContent>
      </Card>
    </Box>
  );
};

export default StudentView;
