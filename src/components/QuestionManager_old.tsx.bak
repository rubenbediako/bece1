import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  IconButton,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,

  Paper,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import { motion } from 'framer-motion';
import { Plus, Edit, Trash2, HelpCircle, ChevronDown } from 'lucide-react';
import type { Subject, Question } from '../App';

interface QuestionManagerProps {
  subjects: Subject[];
  questions: Question[];
  setQuestions: React.Dispatch<React.SetStateAction<Question[]>>;
}

const QuestionManager: React.FC<QuestionManagerProps> = ({ 
  subjects, 
  questions, 
  setQuestions 
}) => {
  const [open, setOpen] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState<Question | null>(null);
  const [selectedSubject, setSelectedSubject] = useState('');
  const [formData, setFormData] = useState({
    subjectId: '',
    topic: '',
    question: '',
    type: 'multiple-choice' as Question['type'],
    options: ['', '', '', ''],
    correctAnswer: '',
    explanation: '',
    difficulty: 'medium' as Question['difficulty'],
    points: 10
  });

  const handleOpen = (question?: Question) => {
    if (question) {
      setEditingQuestion(question);
      setFormData({
        subjectId: question.subjectId,
        topic: question.topic,
        question: question.question,
        type: question.type,
        options: question.options || ['', '', '', ''],
        correctAnswer: question.correctAnswer,
        explanation: question.explanation,
        difficulty: question.difficulty,
        points: question.points
      });
    } else {
      setEditingQuestion(null);
      setFormData({
        subjectId: '',
        topic: '',
        question: '',
        type: 'multiple-choice',
        options: ['', '', '', ''],
        correctAnswer: '',
        explanation: '',
        difficulty: 'medium',
        points: 10
      });
    }
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setEditingQuestion(null);
  };

  const handleSave = () => {
    if (!formData.subjectId || !formData.topic || !formData.question || !formData.correctAnswer || !formData.explanation) {
      return;
    }

    const now = new Date().toISOString();

    if (editingQuestion) {
      // Update existing question
      setQuestions(prev => prev.map(q => 
        q.id === editingQuestion.id
          ? {
              ...q,
              ...formData,
              options: formData.type === 'multiple-choice' ? formData.options.filter(opt => opt.trim()) : undefined,
              createdAt: q.createdAt
            }
          : q
      ));
    } else {
      // Create new question
      const newQuestion: Question = {
        id: `question-${Date.now()}`,
        ...formData,
        options: formData.type === 'multiple-choice' ? formData.options.filter(opt => opt.trim()) : undefined,
        createdAt: now
      };
      setQuestions(prev => [...prev, newQuestion]);
    }

    handleClose();
  };

  const handleDelete = (questionId: string) => {
    if (window.confirm('Are you sure you want to delete this question?')) {
      setQuestions(prev => prev.filter(q => q.id !== questionId));
    }
  };

  const getSubjectName = (subjectId: string) => {
    const subject = subjects.find(s => s.id === subjectId);
    return subject ? subject.name : 'Unknown Subject';
  };

  const getSubjectTopics = (subjectId: string) => {
    const subject = subjects.find(s => s.id === subjectId);
    return subject ? subject.topics : [];
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'success';
      case 'medium': return 'warning';
      case 'hard': return 'error';
      default: return 'primary';
    }
  };

  const filteredQuestions = selectedSubject 
    ? questions.filter(q => q.subjectId === selectedSubject)
    : questions;

  return (
    <Box>
      <Paper elevation={1} sx={{ p: 3, mb: 4, background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)', color: 'white' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box>
            <Typography variant="h4" gutterBottom fontWeight="bold">
              Question Management
            </Typography>
            <Typography variant="body1" sx={{ opacity: 0.9 }}>
              Create and manage examination questions for all subjects
            </Typography>
          </Box>
          <Button
            variant="contained"
            startIcon={<Plus />}
            onClick={() => handleOpen()}
            disabled={subjects.length === 0}
            sx={{ 
              bgcolor: 'rgba(255,255,255,0.2)', 
              '&:hover': { bgcolor: 'rgba(255,255,255,0.3)' } 
            }}
          >
            Add Question
          </Button>
        </Box>
      </Paper>

      {subjects.length === 0 ? (
        <Alert severity="warning" sx={{ mb: 3 }}>
          No subjects found. Please create subjects first before adding questions.
        </Alert>
      ) : (
        <>
          {/* Filter by Subject */}
          <Paper sx={{ p: 2, mb: 3 }}>
            <FormControl sx={{ minWidth: 200 }}>
              <InputLabel>Filter by Subject</InputLabel>
              <Select
                value={selectedSubject}
                onChange={(e) => setSelectedSubject(e.target.value)}
                label="Filter by Subject"
              >
                <MenuItem value="">All Subjects</MenuItem>
                {subjects.map(subject => (
                  <MenuItem key={subject.id} value={subject.id}>
                    {subject.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
            <Typography variant="body2" sx={{ mt: 1, color: 'text.secondary' }}>
              Showing {filteredQuestions.length} questions
            </Typography>
          </Paper>

          {filteredQuestions.length === 0 ? (
            <Alert severity="info">
              No questions found. Click "Add Question" to create your first question.
            </Alert>
          ) : (
            <Box>
              {filteredQuestions.map((question, index) => (
                <motion.div
                  key={question.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                >
                  <Accordion sx={{ mb: 2 }}>
                    <AccordionSummary expandIcon={<ChevronDown />}>
                      <Box sx={{ width: '100%', display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Typography variant="h6" sx={{ flexGrow: 1 }}>
                          {question.question.substring(0, 80)}
                          {question.question.length > 80 ? '...' : ''}
                        </Typography>
                        <Chip label={getSubjectName(question.subjectId)} size="small" />
                        <Chip label={question.topic} size="small" color="primary" />
                        <Chip 
                          label={question.difficulty} 
                          size="small" 
                          color={getDifficultyColor(question.difficulty)} 
                        />
                        <Chip label={`${question.points} pts`} size="small" variant="outlined" />
                      </Box>
                    </AccordionSummary>
                    <AccordionDetails>
                      <Grid container spacing={3}>
                        <Grid item xs={12} md={8}>
                          <Typography variant="h6" gutterBottom color="primary">
                            Question:
                          </Typography>
                          <Typography variant="body1" paragraph sx={{ 
                            fontWeight: 'medium', 
                            p: 2, 
                            bgcolor: 'grey.50', 
                            borderRadius: 1 
                          }}>
                            {question.question}
                          </Typography>

                          {question.options && (
                            <>
                              <Typography variant="h6" gutterBottom color="primary">
                                Options:
                              </Typography>
                              <Box sx={{ mb: 2 }}>
                                {question.options.map((option, idx) => (
                                  <Typography 
                                    key={idx} 
                                    variant="body2" 
                                    sx={{ 
                                      p: 1, 
                                      bgcolor: option === question.correctAnswer ? 'success.light' : 'transparent',
                                      color: option === question.correctAnswer ? 'success.contrastText' : 'inherit',
                                      borderRadius: 1,
                                      mb: 0.5
                                    }}
                                  >
                                    {String.fromCharCode(65 + idx)}. {option}
                                  </Typography>
                                ))}
                              </Box>
                            </>
                          )}

                          <Typography variant="h6" gutterBottom color="secondary">
                            Correct Answer:
                          </Typography>
                          <Typography variant="body2" sx={{ 
                            p: 2, 
                            bgcolor: 'success.light', 
                            color: 'success.contrastText',
                            borderRadius: 1,
                            mb: 2
                          }}>
                            {question.correctAnswer}
                          </Typography>

                          <Typography variant="h6" gutterBottom color="secondary">
                            Explanation:
                          </Typography>
                          <Typography variant="body2" sx={{ 
                            p: 2, 
                            bgcolor: 'info.light', 
                            color: 'info.contrastText',
                            borderRadius: 1 
                          }}>
                            {question.explanation}
                          </Typography>
                        </Grid>
                        
                        <Grid item xs={12} md={4}>
                          <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>
                            <Typography variant="h6" gutterBottom>Question Details</Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>Type:</strong> {question.type.replace('-', ' ').toUpperCase()}
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>Subject:</strong> {getSubjectName(question.subjectId)}
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>Topic:</strong> {question.topic}
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 2 }}>
                              <strong>Created:</strong> {new Date(question.createdAt).toLocaleDateString()}
                            </Typography>
                            
                            <Box sx={{ display: 'flex', gap: 1 }}>
                              <Button
                                size="small"
                                variant="outlined"
                                startIcon={<Edit />}
                                onClick={() => handleOpen(question)}
                              >
                                Edit
                              </Button>
                              <Button
                                size="small"
                                variant="outlined"
                                color="error"
                                startIcon={<Trash2 />}
                                onClick={() => handleDelete(question.id)}
                              >
                                Delete
                              </Button>
                            </Box>
                          </Paper>
                        </Grid>
                      </Grid>
                    </AccordionDetails>
                  </Accordion>
                </motion.div>
              ))}
            </Box>
          )}
        </>
      )}

      {/* Add/Edit Question Dialog */}
      <Dialog open={open} onClose={handleClose} maxWidth="lg" fullWidth>
        <DialogTitle>
          {editingQuestion ? 'Edit Question' : 'Add New Question'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Subject</InputLabel>
                <Select
                  value={formData.subjectId}
                  onChange={(e) => setFormData({ ...formData, subjectId: e.target.value, topic: '' })}
                  label="Subject"
                  required
                >
                  {subjects.map(subject => (
                    <MenuItem key={subject.id} value={subject.id}>
                      {subject.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth disabled={!formData.subjectId}>
                <InputLabel>Topic</InputLabel>
                <Select
                  value={formData.topic}
                  onChange={(e) => setFormData({ ...formData, topic: e.target.value })}
                  label="Topic"
                  required
                >
                  {getSubjectTopics(formData.subjectId).map(topic => (
                    <MenuItem key={topic} value={topic}>
                      {topic}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Question"
                value={formData.question}
                onChange={(e) => setFormData({ ...formData, question: e.target.value })}
                multiline
                rows={3}
                required
                placeholder="Enter the question text"
              />
            </Grid>
            
            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>Question Type</InputLabel>
                <Select
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value as Question['type'] })}
                  label="Question Type"
                >
                  <MenuItem value="multiple-choice">Multiple Choice</MenuItem>
                  <MenuItem value="short-answer">Short Answer</MenuItem>
                  <MenuItem value="essay">Essay</MenuItem>
                  <MenuItem value="practical">Practical</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>Difficulty</InputLabel>
                <Select
                  value={formData.difficulty}
                  onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as Question['difficulty'] })}
                  label="Difficulty"
                >
                  <MenuItem value="easy">Easy</MenuItem>
                  <MenuItem value="medium">Medium</MenuItem>
                  <MenuItem value="hard">Hard</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                label="Points"
                type="number"
                value={formData.points}
                onChange={(e) => setFormData({ ...formData, points: parseInt(e.target.value) || 0 })}
                inputProps={{ min: 1, max: 50 }}
              />
            </Grid>
            
            {formData.type === 'multiple-choice' && (
              <>
                <Grid item xs={12}>
                  <Typography variant="h6" gutterBottom>Answer Options</Typography>
                </Grid>
                {formData.options.map((option, index) => (
                  <Grid item xs={12} md={6} key={index}>
                    <TextField
                      fullWidth
                      label={`Option ${String.fromCharCode(65 + index)}`}
                      value={option}
                      onChange={(e) => {
                        const newOptions = [...formData.options];
                        newOptions[index] = e.target.value;
                        setFormData({ ...formData, options: newOptions });
                      }}
                      placeholder={`Enter option ${String.fromCharCode(65 + index)}`}
                    />
                  </Grid>
                ))}
              </>
            )}
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Correct Answer"
                value={formData.correctAnswer}
                onChange={(e) => setFormData({ ...formData, correctAnswer: e.target.value })}
                required
                placeholder="Enter the correct answer"
                helperText={formData.type === 'multiple-choice' ? "Enter the exact text of the correct option" : "Enter the expected answer"}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Explanation"
                value={formData.explanation}
                onChange={(e) => setFormData({ ...formData, explanation: e.target.value })}
                multiline
                rows={3}
                required
                placeholder="Provide a detailed explanation of the answer"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button 
            onClick={handleSave}
            variant="contained"
            disabled={!formData.subjectId || !formData.topic || !formData.question || !formData.correctAnswer || !formData.explanation}
          >
            {editingQuestion ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default QuestionManager;
