import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  IconButton,
  Alert,
  Paper
} from '@mui/material';
import { motion } from 'framer-motion';
import { Plus, Edit, Trash2, BookOpen } from 'lucide-react';
import type { Subject } from '../App';

interface SubjectManagerProps {
  subjects: Subject[];
  setSubjects: React.Dispatch<React.SetStateAction<Subject[]>>;
}

const SubjectManager: React.FC<SubjectManagerProps> = ({ subjects, setSubjects }) => {
  const [open, setOpen] = useState(false);
  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    topics: ''
  });

  const handleOpen = (subject?: Subject) => {
    if (subject) {
      setEditingSubject(subject);
      setFormData({
        name: subject.name,
        description: subject.description,
        topics: subject.topics.join(', ')
      });
    } else {
      setEditingSubject(null);
      setFormData({ name: '', description: '', topics: '' });
    }
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setEditingSubject(null);
    setFormData({ name: '', description: '', topics: '' });
  };

  const handleSave = () => {
    if (!formData.name.trim() || !formData.description.trim()) {
      return;
    }

    const topicsArray = formData.topics
      .split(',')
      .map(topic => topic.trim())
      .filter(topic => topic.length > 0);

    const now = new Date().toISOString();

    if (editingSubject) {
      // Update existing subject
      setSubjects(prev => prev.map(subject => 
        subject.id === editingSubject.id
          ? {
              ...subject,
              name: formData.name,
              description: formData.description,
              topics: topicsArray,
              updatedAt: now
            }
          : subject
      ));
    } else {
      // Create new subject
      const newSubject: Subject = {
        id: `subject-${Date.now()}`,
        name: formData.name,
        description: formData.description,
        topics: topicsArray,
        createdAt: now,
        updatedAt: now
      };
      setSubjects(prev => [...prev, newSubject]);
    }

    handleClose();
  };

  const handleDelete = (subjectId: string) => {
    if (window.confirm('Are you sure you want to delete this subject? This action cannot be undone.')) {
      setSubjects(prev => prev.filter(subject => subject.id !== subjectId));
    }
  };

  return (
    <Box>
      <Paper elevation={1} sx={{ p: 3, mb: 4, background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)', color: 'white' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box>
            <Typography variant="h4" gutterBottom fontWeight="bold">
              Subject Management
            </Typography>
            <Typography variant="body1" sx={{ opacity: 0.9 }}>
              Create and manage subjects for the BECE examination system
            </Typography>
          </Box>
          <Button
            variant="contained"
            startIcon={<Plus />}
            onClick={() => handleOpen()}
            sx={{ 
              bgcolor: 'rgba(255,255,255,0.2)', 
              '&:hover': { bgcolor: 'rgba(255,255,255,0.3)' } 
            }}
          >
            Add Subject
          </Button>
        </Box>
      </Paper>

      {subjects.length === 0 ? (
        <Alert severity="info" sx={{ mb: 3 }}>
          No subjects found. Click "Add Subject" to create your first subject.
        </Alert>
      ) : (
        <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', gap: 3 }}>
          {subjects.map((subject, index) => (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                  <CardContent sx={{ flexGrow: 1 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <BookOpen size={24} color="#1976d2" />
                      <Typography variant="h6" sx={{ ml: 1, flexGrow: 1 }}>
                        {subject.name}
                      </Typography>
                    </Box>
                    
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {subject.description}
                    </Typography>
                    
                    <Typography variant="subtitle2" gutterBottom>
                      Topics ({subject.topics.length}):
                    </Typography>
                    
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 2 }}>
                      {subject.topics.slice(0, 5).map((topic, index) => (
                        <Chip
                          key={index}
                          label={topic}
                          size="small"
                          variant="outlined"
                          color="primary"
                        />
                      ))}
                      {subject.topics.length > 5 && (
                        <Chip
                          label={`+${subject.topics.length - 5} more`}
                          size="small"
                          variant="outlined"
                          color="secondary"
                        />
                      )}
                    </Box>
                    
                    <Typography variant="caption" color="text.secondary">
                      Created: {new Date(subject.createdAt).toLocaleDateString()}
                    </Typography>
                  </CardContent>
                  
                  <CardActions sx={{ justifyContent: 'flex-end', pt: 0 }}>
                    <IconButton
                      size="small"
                      onClick={() => handleOpen(subject)}
                      color="primary"
                    >
                      <Edit size={18} />
                    </IconButton>
                    <IconButton
                      size="small"
                      onClick={() => handleDelete(subject.id)}
                      color="error"
                    >
                      <Trash2 size={18} />
                    </IconButton>
                  </CardActions>
                </Card>
              </motion.div>
          ))}
        </Box>
      )}

      {/* Add/Edit Subject Dialog */}
      <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingSubject ? 'Edit Subject' : 'Add New Subject'}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <TextField
              fullWidth
              label="Subject Name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              margin="normal"
              required
              placeholder="e.g., Mathematics, English Language"
            />
            
            <TextField
              fullWidth
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              margin="normal"
              required
              multiline
              rows={3}
              placeholder="Brief description of the subject"
            />
            
            <TextField
              fullWidth
              label="Topics"
              value={formData.topics}
              onChange={(e) => setFormData({ ...formData, topics: e.target.value })}
              margin="normal"
              multiline
              rows={4}
              placeholder="Enter topics separated by commas (e.g., Algebra, Geometry, Statistics)"
              helperText="Separate topics with commas. Each topic will be used for question categorization."
            />
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button 
            onClick={handleSave}
            variant="contained"
            disabled={!formData.name.trim() || !formData.description.trim()}
          >
            {editingSubject ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default SubjectManager;
