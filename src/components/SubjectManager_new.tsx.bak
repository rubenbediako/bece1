import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  IconButton,
  Alert,
  Paper,
  Stack,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails
} from '@mui/material';
import { motion } from 'framer-motion';
import { Plus, Edit, Trash2, BookOpen, ChevronDown, Tag } from 'lucide-react';
import type { Subject, Topic } from '../App';

interface SubjectManagerProps {
  subjects: Subject[];
  setSubjects: React.Dispatch<React.SetStateAction<Subject[]>>;
  topics: Topic[];
  setTopics: React.Dispatch<React.SetStateAction<Topic[]>>;
}

const SubjectManager: React.FC<SubjectManagerProps> = ({ 
  subjects, 
  setSubjects, 
  topics, 
  setTopics 
}) => {
  const [openSubject, setOpenSubject] = useState(false);
  const [openTopic, setOpenTopic] = useState(false);
  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);
  const [editingTopic, setEditingTopic] = useState<Topic | null>(null);
  const [selectedSubjectId, setSelectedSubjectId] = useState('');
  
  const [subjectFormData, setSubjectFormData] = useState({
    name: '',
    description: ''
  });

  const [topicFormData, setTopicFormData] = useState({
    name: '',
    description: '',
    subjectId: ''
  });

  // Subject CRUD operations
  const handleOpenSubject = (subject?: Subject) => {
    if (subject) {
      setEditingSubject(subject);
      setSubjectFormData({
        name: subject.name,
        description: subject.description
      });
    } else {
      setEditingSubject(null);
      setSubjectFormData({ name: '', description: '' });
    }
    setOpenSubject(true);
  };

  const handleCloseSubject = () => {
    setOpenSubject(false);
    setEditingSubject(null);
    setSubjectFormData({ name: '', description: '' });
  };

  const handleSaveSubject = () => {
    if (!subjectFormData.name.trim() || !subjectFormData.description.trim()) {
      return;
    }

    const now = new Date().toISOString();

    if (editingSubject) {
      // Update existing subject
      setSubjects(prev => prev.map(subject => 
        subject.id === editingSubject.id
          ? {
              ...subject,
              name: subjectFormData.name,
              description: subjectFormData.description,
              updatedAt: now
            }
          : subject
      ));
    } else {
      // Create new subject
      const newSubject: Subject = {
        id: `subject-${Date.now()}`,
        name: subjectFormData.name,
        description: subjectFormData.description,
        topics: [], // Empty array since topics are now separate entities
        createdAt: now,
        updatedAt: now
      };
      setSubjects(prev => [...prev, newSubject]);
    }

    handleCloseSubject();
  };

  const handleDeleteSubject = (subjectId: string) => {
    if (window.confirm('Are you sure you want to delete this subject? This will also delete all related topics and questions.')) {
      setSubjects(prev => prev.filter(s => s.id !== subjectId));
      setTopics(prev => prev.filter(t => t.subjectId !== subjectId));
    }
  };

  // Topic CRUD operations
  const handleOpenTopic = (topic?: Topic, subjectId?: string) => {
    if (topic) {
      setEditingTopic(topic);
      setTopicFormData({
        name: topic.name,
        description: topic.description,
        subjectId: topic.subjectId
      });
    } else {
      setEditingTopic(null);
      setTopicFormData({ 
        name: '', 
        description: '',
        subjectId: subjectId || ''
      });
    }
    setOpenTopic(true);
  };

  const handleCloseTopic = () => {
    setOpenTopic(false);
    setEditingTopic(null);
    setTopicFormData({ name: '', description: '', subjectId: '' });
  };

  const handleSaveTopic = () => {
    if (!topicFormData.name.trim() || !topicFormData.description.trim() || !topicFormData.subjectId) {
      return;
    }

    const now = new Date().toISOString();

    if (editingTopic) {
      // Update existing topic
      setTopics(prev => prev.map(topic => 
        topic.id === editingTopic.id
          ? {
              ...topic,
              name: topicFormData.name,
              description: topicFormData.description,
              updatedAt: now
            }
          : topic
      ));
    } else {
      // Create new topic
      const newTopic: Topic = {
        id: `topic-${Date.now()}`,
        subjectId: topicFormData.subjectId,
        name: topicFormData.name,
        description: topicFormData.description,
        createdAt: now,
        updatedAt: now
      };
      setTopics(prev => [...prev, newTopic]);
    }

    handleCloseTopic();
  };

  const handleDeleteTopic = (topicId: string) => {
    if (window.confirm('Are you sure you want to delete this topic? This will also delete all related questions.')) {
      setTopics(prev => prev.filter(t => t.id !== topicId));
    }
  };

  return (
    <Box>
      <Paper elevation={1} sx={{ p: 3, mb: 4, backgroundColor: 'primary.main', color: 'white' }}>
        <Typography variant="h4" gutterBottom fontWeight="bold">
          ðŸ“š Subject & Topic Management
        </Typography>
        <Typography variant="h6" sx={{ opacity: 0.9 }}>
          Create and manage subjects and their topics for BECE 2026
        </Typography>
      </Paper>

      {/* Add Subject Button */}
      <Box sx={{ mb: 3 }}>
        <Button
          variant="contained"
          startIcon={<Plus size={20} />}
          onClick={() => handleOpenSubject()}
          size="large"
        >
          Add New Subject
        </Button>
      </Box>

      {subjects.length === 0 ? (
        <Alert severity="info" sx={{ mb: 3 }}>
          No subjects found. Click "Add New Subject" to create your first subject.
        </Alert>
      ) : (
        <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', gap: 3 }}>
          {subjects.map((subject, index) => {
            const subjectTopics = topics.filter(t => t.subjectId === subject.id);
            
            return (
              <motion.div
                key={subject.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                  <CardContent sx={{ flexGrow: 1 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <BookOpen size={24} color="#1976d2" />
                      <Typography variant="h6" sx={{ ml: 1, flexGrow: 1 }}>
                        {subject.name}
                      </Typography>
                      <IconButton onClick={() => handleOpenSubject(subject)} size="small">
                        <Edit size={16} />
                      </IconButton>
                      <IconButton 
                        onClick={() => handleDeleteSubject(subject.id)} 
                        size="small"
                        color="error"
                      >
                        <Trash2 size={16} />
                      </IconButton>
                    </Box>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {subject.description}
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="subtitle1" fontWeight="bold">
                        Topics ({subjectTopics.length})
                      </Typography>
                      <Button
                        size="small"
                        startIcon={<Plus size={16} />}
                        onClick={() => handleOpenTopic(undefined, subject.id)}
                      >
                        Add Topic
                      </Button>
                    </Box>

                    {subjectTopics.length === 0 ? (
                      <Typography variant="body2" color="text.secondary" sx={{ fontStyle: 'italic' }}>
                        No topics yet. Add your first topic to get started.
                      </Typography>
                    ) : (
                      <Stack spacing={1}>
                        {subjectTopics.map((topic) => (
                          <Box
                            key={topic.id}
                            sx={{
                              p: 2,
                              border: '1px solid',
                              borderColor: 'grey.300',
                              borderRadius: 1,
                              backgroundColor: 'grey.50'
                            }}
                          >
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                <Tag size={16} color="#666" />
                                <Typography variant="body1" fontWeight="bold" sx={{ ml: 1 }}>
                                  {topic.name}
                                </Typography>
                              </Box>
                              <Box>
                                <IconButton onClick={() => handleOpenTopic(topic)} size="small">
                                  <Edit size={14} />
                                </IconButton>
                                <IconButton 
                                  onClick={() => handleDeleteTopic(topic.id)} 
                                  size="small"
                                  color="error"
                                >
                                  <Trash2 size={14} />
                                </IconButton>
                              </Box>
                            </Box>
                            {topic.description && (
                              <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                                {topic.description}
                              </Typography>
                            )}
                          </Box>
                        ))}
                      </Stack>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            );
          })}
        </Box>
      )}

      {/* Subject Dialog */}
      <Dialog open={openSubject} onClose={handleCloseSubject} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingSubject ? 'Edit Subject' : 'Add New Subject'}
        </DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            <TextField
              label="Subject Name"
              fullWidth
              value={subjectFormData.name}
              onChange={(e) => setSubjectFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="e.g., Mathematics, English, Science"
            />
            <TextField
              label="Description"
              fullWidth
              multiline
              rows={3}
              value={subjectFormData.description}
              onChange={(e) => setSubjectFormData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="Brief description of the subject"
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseSubject}>Cancel</Button>
          <Button onClick={handleSaveSubject} variant="contained">
            {editingSubject ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Topic Dialog */}
      <Dialog open={openTopic} onClose={handleCloseTopic} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingTopic ? 'Edit Topic' : 'Add New Topic'}
        </DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            {!editingTopic && (
              <TextField
                select
                label="Subject"
                fullWidth
                value={topicFormData.subjectId}
                onChange={(e) => setTopicFormData(prev => ({ ...prev, subjectId: e.target.value }))}
                SelectProps={{ native: true }}
              >
                <option value="">Select a subject</option>
                {subjects.map((subject) => (
                  <option key={subject.id} value={subject.id}>
                    {subject.name}
                  </option>
                ))}
              </TextField>
            )}
            <TextField
              label="Topic Name"
              fullWidth
              value={topicFormData.name}
              onChange={(e) => setTopicFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="e.g., Algebra, Geometry, Grammar"
            />
            <TextField
              label="Description"
              fullWidth
              multiline
              rows={3}
              value={topicFormData.description}
              onChange={(e) => setTopicFormData(prev => ({ ...prev, description: e.target.value }))}
              placeholder="Brief description of the topic"
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseTopic}>Cancel</Button>
          <Button onClick={handleSaveTopic} variant="contained">
            {editingTopic ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default SubjectManager;
