import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  Paper,
  Stack,
  Chip,
  Breadcrumbs,
  Link,
  Divider,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert
} from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  BookOpen, 
  Target, 
  HelpCircle, 
  ArrowRight, 
  Home, 
  Play,
  Volume2,
  VolumeX,
  ChevronLeft
} from 'lucide-react';
import type { Subject, Topic, Question, PredictedTopic } from '../App';

interface StudentViewProps {
  subjects: Subject[];
  topics: Topic[];
  questions: Question[];
  predictedTopics: PredictedTopic[];
}

type ViewState = 'subjects' | 'topics' | 'questions' | 'answer';

const StudentView: React.FC<StudentViewProps> = ({ 
  subjects, 
  topics, 
  questions, 
  predictedTopics 
}) => {
  const [currentView, setCurrentView] = useState<ViewState>('subjects');
  const [selectedSubject, setSelectedSubject] = useState<Subject | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [selectedQuestion, setSelectedQuestion] = useState<Question | null>(null);
  const [isPlayingPodcast, setIsPlayingPodcast] = useState(false);

  // Get predicted topics for selected subject
  const getPredictedTopicsForSubject = (subjectId: string) => {
    const subjectTopicIds = topics
      .filter(t => t.subjectId === subjectId)
      .map(t => t.id);
    
    return predictedTopics
      .filter(pt => pt.isActive && subjectTopicIds.includes(pt.topicId))
      .sort((a, b) => b.probability - a.probability);
  };

  // Get predicted questions for selected topic
  const getPredictedQuestionsForTopic = (topicId: string) => {
    return questions
      .filter(q => q.topicId === topicId)
      .sort((a, b) => {
        // Sort by difficulty and points
        const difficultyOrder = { easy: 1, medium: 2, hard: 3 };
        return difficultyOrder[a.difficulty] - difficultyOrder[b.difficulty] || b.points - a.points;
      });
  };

  const getTopicById = (topicId: string) => {
    return topics.find(t => t.id === topicId);
  };

  const handleSubjectClick = (subject: Subject) => {
    setSelectedSubject(subject);
    setSelectedTopic(null);
    setSelectedQuestion(null);
    setCurrentView('topics');
  };

  const handleTopicClick = (topicId: string) => {
    const topic = getTopicById(topicId);
    if (topic) {
      setSelectedTopic(topic);
      setSelectedQuestion(null);
      setCurrentView('questions');
    }
  };

  const handleQuestionClick = (question: Question) => {
    setSelectedQuestion(question);
    setCurrentView('answer');
  };

  const handleBack = () => {
    switch (currentView) {
      case 'topics':
        setCurrentView('subjects');
        setSelectedSubject(null);
        break;
      case 'questions':
        setCurrentView('topics');
        setSelectedTopic(null);
        break;
      case 'answer':
        setCurrentView('questions');
        setSelectedQuestion(null);
        break;
    }
  };

  const generatePodcastText = (question: Question) => {
    return `Welcome to BECE 2026 Question Explanation. 

Question: ${question.question}

${question.type === 'multiple-choice' && question.options ? `
The options are:
${question.options.map((opt, idx) => `${String.fromCharCode(65 + idx)}. ${opt}`).join('\n')}
` : ''}

The correct answer is: ${question.correctAnswer}

Explanation: ${question.explanation}

Detailed Solution:
${question.solution}

This question is rated as ${question.difficulty} difficulty and is worth ${question.points} points. 

Thank you for using BECE 2026 Question Predictor. Good luck with your preparation!`;
  };

  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      // Stop any ongoing speech
      window.speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.8;
      utterance.pitch = 1;
      utterance.volume = 1;
      
      utterance.onstart = () => setIsPlayingPodcast(true);
      utterance.onend = () => setIsPlayingPodcast(false);
      utterance.onerror = () => setIsPlayingPodcast(false);
      
      window.speechSynthesis.speak(utterance);
    } else {
      alert('Speech synthesis is not supported in your browser.');
    }
  };

  const stopPodcast = () => {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
    }
    setIsPlayingPodcast(false);
  };

  const renderBreadcrumbs = () => (
    <Breadcrumbs separator={<ArrowRight size={16} />} sx={{ mb: 3 }}>
      <Link 
        color="inherit" 
        href="#" 
        onClick={(e) => { e.preventDefault(); setCurrentView('subjects'); }}
        sx={{ display: 'flex', alignItems: 'center' }}
      >
        <Home size={16} />
        <Typography sx={{ ml: 0.5 }}>Subjects</Typography>
      </Link>
      {selectedSubject && (
        <Link 
          color="inherit" 
          href="#" 
          onClick={(e) => { e.preventDefault(); setCurrentView('topics'); }}
        >
          {selectedSubject.name}
        </Link>
      )}
      {selectedTopic && (
        <Link 
          color="inherit" 
          href="#" 
          onClick={(e) => { e.preventDefault(); setCurrentView('questions'); }}
        >
          {selectedTopic.name}
        </Link>
      )}
      {selectedQuestion && (
        <Typography color="text.primary">
          Question & Answer
        </Typography>
      )}
    </Breadcrumbs>
  );

  const renderSubjects = () => (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.5 }}
      >
        <Paper elevation={1} sx={{ p: 3, mb: 4, backgroundColor: 'primary.main', color: 'white' }}>
          <Typography variant="h4" gutterBottom fontWeight="bold">
            ðŸŽ¯ BECE 2026 Question Predictor
          </Typography>
          <Typography variant="h6" sx={{ opacity: 0.9 }}>
            Select a subject to view predicted topics for BECE 2026
          </Typography>
        </Paper>

        <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: 3 }}>
          {subjects.map((subject, index) => {
            const predictedTopicsCount = getPredictedTopicsForSubject(subject.id).length;
            const subjectTopics = topics.filter(t => t.subjectId === subject.id);
            
            return (
              <motion.div
                key={subject.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <Card 
                  sx={{ 
                    height: '100%', 
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    '&:hover': { boxShadow: 6 }
                  }}
                  onClick={() => handleSubjectClick(subject)}
                >
                  <CardContent>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <BookOpen size={24} color="#1976d2" />
                      <Typography variant="h6" sx={{ ml: 1, flexGrow: 1 }}>
                        {subject.name}
                      </Typography>
                    </Box>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {subject.description}
                    </Typography>
                    <Stack direction="row" spacing={1} flexWrap="wrap">
                      <Chip 
                        label={`${subjectTopics.length} Topics`} 
                        size="small" 
                        color="primary" 
                      />
                      <Chip 
                        label={`${predictedTopicsCount} Predicted`} 
                        size="small" 
                        color="success" 
                      />
                    </Stack>
                  </CardContent>
                  <CardActions>
                    <Button 
                      variant="contained" 
                      endIcon={<ArrowRight size={16} />}
                      fullWidth
                    >
                      View Predictions
                    </Button>
                  </CardActions>
                </Card>
              </motion.div>
            );
          })}
        </Box>
      </motion.div>
    </AnimatePresence>
  );

  const renderTopics = () => {
    if (!selectedSubject) return null;
    
    const predictedTopics = getPredictedTopicsForSubject(selectedSubject.id);

    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -100 }}
          transition={{ duration: 0.5 }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <IconButton onClick={handleBack} sx={{ mr: 2 }}>
              <ChevronLeft />
            </IconButton>
            <Typography variant="h5" fontWeight="bold">
              Predicted Topics for {selectedSubject.name}
            </Typography>
          </Box>

          {predictedTopics.length === 0 ? (
            <Alert severity="info">
              No predicted topics available for this subject. Check back later or contact admin.
            </Alert>
          ) : (
            <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', gap: 3 }}>
              {predictedTopics.map((prediction, index) => {
                const topic = getTopicById(prediction.topicId);
                if (!topic) return null;

                return (
                  <motion.div
                    key={prediction.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <Card 
                      sx={{ 
                        cursor: 'pointer',
                        border: '2px solid',
                        borderColor: prediction.probability >= 70 ? 'success.main' : 
                                   prediction.probability >= 40 ? 'warning.main' : 'info.main'
                      }}
                      onClick={() => handleTopicClick(topic.id)}
                    >
                      <CardContent>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                          <Target size={24} color="#1976d2" />
                          <Typography variant="h6" sx={{ ml: 1, flexGrow: 1 }}>
                            {topic.name}
                          </Typography>
                          <Chip 
                            label={`${prediction.probability}%`}
                            color={
                              prediction.probability >= 70 ? 'success' : 
                              prediction.probability >= 40 ? 'warning' : 'info'
                            }
                            variant="filled"
                          />
                        </Box>
                        <Typography variant="body2" color="text.secondary" paragraph>
                          {topic.description}
                        </Typography>
                        <Typography variant="body2" sx={{ fontStyle: 'italic' }}>
                          <strong>Prediction Reasoning:</strong> {prediction.reasoning}
                        </Typography>
                      </CardContent>
                      <CardActions>
                        <Button 
                          variant="contained" 
                          endIcon={<ArrowRight size={16} />}
                          fullWidth
                        >
                          View Questions
                        </Button>
                      </CardActions>
                    </Card>
                  </motion.div>
                );
              })}
            </Box>
          )}
        </motion.div>
      </AnimatePresence>
    );
  };

  const renderQuestions = () => {
    if (!selectedTopic) return null;
    
    const topicQuestions = getPredictedQuestionsForTopic(selectedTopic.id);

    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -100 }}
          transition={{ duration: 0.5 }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <IconButton onClick={handleBack} sx={{ mr: 2 }}>
              <ChevronLeft />
            </IconButton>
            <Typography variant="h5" fontWeight="bold">
              Predicted Questions for {selectedTopic.name}
            </Typography>
          </Box>

          {topicQuestions.length === 0 ? (
            <Alert severity="info">
              No questions available for this topic yet. Check back later.
            </Alert>
          ) : (
            <Stack spacing={3}>
              {topicQuestions.map((question, index) => (
                <motion.div
                  key={question.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                  <Card 
                    sx={{ 
                      cursor: 'pointer',
                      '&:hover': { boxShadow: 4 }
                    }}
                    onClick={() => handleQuestionClick(question)}
                  >
                    <CardContent>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                        <Stack direction="row" spacing={1}>
                          <Chip label={question.type} size="small" />
                          <Chip 
                            label={question.difficulty} 
                            size="small" 
                            color={
                              question.difficulty === 'easy' ? 'success' : 
                              question.difficulty === 'medium' ? 'warning' : 'error'
                            } 
                          />
                          <Chip label={`${question.points} pts`} size="small" variant="outlined" />
                        </Stack>
                        <HelpCircle size={20} color="#666" />
                      </Box>
                      <Typography variant="h6" gutterBottom>
                        {question.question}
                      </Typography>
                      {question.type === 'multiple-choice' && question.options && (
                        <Box sx={{ ml: 2, mt: 2 }}>
                          {question.options.map((option, idx) => (
                            <Typography key={idx} variant="body2" color="text.secondary">
                              {String.fromCharCode(65 + idx)}. {option}
                            </Typography>
                          ))}
                        </Box>
                      )}
                    </CardContent>
                    <CardActions>
                      <Button 
                        variant="contained" 
                        endIcon={<ArrowRight size={16} />}
                        fullWidth
                      >
                        View Answer & Solution
                      </Button>
                    </CardActions>
                  </Card>
                </motion.div>
              ))}
            </Stack>
          )}
        </motion.div>
      </AnimatePresence>
    );
  };

  const renderAnswer = () => {
    if (!selectedQuestion) return null;

    return (
      <AnimatePresence>
        <motion.div
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -100 }}
          transition={{ duration: 0.5 }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
            <IconButton onClick={handleBack} sx={{ mr: 2 }}>
              <ChevronLeft />
            </IconButton>
            <Typography variant="h5" fontWeight="bold" sx={{ flexGrow: 1 }}>
              Answer & Solution
            </Typography>
            <Button
              variant={isPlayingPodcast ? "outlined" : "contained"}
              startIcon={isPlayingPodcast ? <VolumeX /> : <Volume2 />}
              onClick={() => isPlayingPodcast ? stopPodcast() : speakText(generatePodcastText(selectedQuestion))}
              color={isPlayingPodcast ? "error" : "primary"}
            >
              {isPlayingPodcast ? 'Stop Podcast' : 'Play Podcast'}
            </Button>
          </Box>

          <Stack spacing={3}>
            {/* Question */}
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom color="primary">
                  Question:
                </Typography>
                <Typography variant="body1" paragraph>
                  {selectedQuestion.question}
                </Typography>
                
                {selectedQuestion.type === 'multiple-choice' && selectedQuestion.options && (
                  <Box sx={{ ml: 2 }}>
                    {selectedQuestion.options.map((option, idx) => (
                      <Typography 
                        key={idx} 
                        variant="body1" 
                        sx={{ 
                          color: option === selectedQuestion.correctAnswer ? 'success.main' : 'text.primary',
                          fontWeight: option === selectedQuestion.correctAnswer ? 'bold' : 'normal'
                        }}
                      >
                        {String.fromCharCode(65 + idx)}. {option}
                        {option === selectedQuestion.correctAnswer && ' âœ“'}
                      </Typography>
                    ))}
                  </Box>
                )}
              </CardContent>
            </Card>

            {/* Answer */}
            <Card sx={{ backgroundColor: 'success.50' }}>
              <CardContent>
                <Typography variant="h6" gutterBottom color="success.main">
                  Correct Answer:
                </Typography>
                <Typography variant="h5" fontWeight="bold" color="success.main">
                  {selectedQuestion.correctAnswer}
                </Typography>
              </CardContent>
            </Card>

            {/* Explanation */}
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom color="primary">
                  Explanation:
                </Typography>
                <Typography variant="body1" paragraph>
                  {selectedQuestion.explanation}
                </Typography>
              </CardContent>
            </Card>

            {/* Detailed Solution */}
            <Card sx={{ backgroundColor: 'info.50' }}>
              <CardContent>
                <Typography variant="h6" gutterBottom color="info.main">
                  Detailed Solution:
                </Typography>
                <Typography variant="body1" sx={{ whiteSpace: 'pre-line' }}>
                  {selectedQuestion.solution}
                </Typography>
              </CardContent>
            </Card>
          </Stack>
        </motion.div>
      </AnimatePresence>
    );
  };

  return (
    <Box>
      {renderBreadcrumbs()}
      
      {currentView === 'subjects' && renderSubjects()}
      {currentView === 'topics' && renderTopics()}
      {currentView === 'questions' && renderQuestions()}
      {currentView === 'answer' && renderAnswer()}
    </Box>
  );
};

export default StudentView;
