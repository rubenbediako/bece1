import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Chip,
  IconButton,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,

  Paper,
  Switch,
  FormControlLabel,
  Slider,
  LinearProgress
} from '@mui/material';
import { motion } from 'framer-motion';
import { Plus, Edit, Trash2, Target, TrendingUp, Eye, EyeOff } from 'lucide-react';
import type { Subject, Question, PredictedTopic } from '../App';

interface PredictionManagerProps {
  subjects: Subject[];
  questions: Question[];
  predictedTopics: PredictedTopic[];
  setPredictedTopics: React.Dispatch<React.SetStateAction<PredictedTopic[]>>;
}

const PredictionManager: React.FC<PredictionManagerProps> = ({ 
  subjects, 
  questions,
  predictedTopics, 
  setPredictedTopics 
}) => {
  const [open, setOpen] = useState(false);
  const [editingPrediction, setEditingPrediction] = useState<PredictedTopic | null>(null);
  const [selectedSubject, setSelectedSubject] = useState('');
  const [formData, setFormData] = useState({
    subjectId: '',
    topic: '',
    probability: 75,
    reasoning: '',
    isActive: true
  });

  const handleOpen = (prediction?: PredictedTopic) => {
    if (prediction) {
      setEditingPrediction(prediction);
      setFormData({
        subjectId: prediction.subjectId,
        topic: prediction.topic,
        probability: prediction.probability * 100,
        reasoning: prediction.reasoning,
        isActive: prediction.isActive
      });
    } else {
      setEditingPrediction(null);
      setFormData({
        subjectId: '',
        topic: '',
        probability: 75,
        reasoning: '',
        isActive: true
      });
    }
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setEditingPrediction(null);
  };

  const handleSave = () => {
    if (!formData.subjectId || !formData.topic || !formData.reasoning) {
      return;
    }

    const now = new Date().toISOString();

    if (editingPrediction) {
      // Update existing prediction
      setPredictedTopics(prev => prev.map(p => 
        p.id === editingPrediction.id
          ? {
              ...p,
              ...formData,
              probability: formData.probability / 100
            }
          : p
      ));
    } else {
      // Create new prediction
      const newPrediction: PredictedTopic = {
        id: `prediction-${Date.now()}`,
        ...formData,
        probability: formData.probability / 100,
        createdAt: now
      };
      setPredictedTopics(prev => [...prev, newPrediction]);
    }

    handleClose();
  };

  const handleDelete = (predictionId: string) => {
    if (window.confirm('Are you sure you want to delete this prediction?')) {
      setPredictedTopics(prev => prev.filter(p => p.id !== predictionId));
    }
  };

  const handleToggleActive = (predictionId: string) => {
    setPredictedTopics(prev => prev.map(p => 
      p.id === predictionId ? { ...p, isActive: !p.isActive } : p
    ));
  };

  const getSubjectName = (subjectId: string) => {
    const subject = subjects.find(s => s.id === subjectId);
    return subject ? subject.name : 'Unknown Subject';
  };

  const getSubjectTopics = (subjectId: string) => {
    const subject = subjects.find(s => s.id === subjectId);
    return subject ? subject.topics : [];
  };

  const getTopicQuestionCount = (subjectId: string, topic: string) => {
    return questions.filter(q => q.subjectId === subjectId && q.topic === topic).length;
  };

  const getProbabilityColor = (probability: number) => {
    if (probability >= 0.8) return 'success';
    if (probability >= 0.6) return 'warning';
    return 'error';
  };

  const getProbabilityLabel = (probability: number) => {
    if (probability >= 0.8) return 'Very High';
    if (probability >= 0.6) return 'High';
    if (probability >= 0.4) return 'Medium';
    return 'Low';
  };

  const filteredPredictions = selectedSubject 
    ? predictedTopics.filter(p => p.subjectId === selectedSubject)
    : predictedTopics;

  const activePredictions = filteredPredictions.filter(p => p.isActive);

  return (
    <Box>
      <Paper elevation={1} sx={{ p: 3, mb: 4, background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)', color: 'white' }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box>
            <Typography variant="h4" gutterBottom fontWeight="bold">
              Prediction Management
            </Typography>
            <Typography variant="body1" sx={{ opacity: 0.9 }}>
              Set topic predictions with probability scores for BECE 2026
            </Typography>
          </Box>
          <Button
            variant="contained"
            startIcon={<Plus />}
            onClick={() => handleOpen()}
            disabled={subjects.length === 0}
            sx={{ 
              bgcolor: 'rgba(255,255,255,0.2)', 
              '&:hover': { bgcolor: 'rgba(255,255,255,0.3)' } 
            }}
          >
            Add Prediction
          </Button>
        </Box>
      </Paper>

      {subjects.length === 0 ? (
        <Alert severity="warning" sx={{ mb: 3 }}>
          No subjects found. Please create subjects first before setting predictions.
        </Alert>
      ) : (
        <>
          {/* Filter and Stats */}
          <Grid container spacing={3} sx={{ mb: 3 }}>
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2 }}>
                <FormControl sx={{ minWidth: 200 }}>
                  <InputLabel>Filter by Subject</InputLabel>
                  <Select
                    value={selectedSubject}
                    onChange={(e) => setSelectedSubject(e.target.value)}
                    label="Filter by Subject"
                  >
                    <MenuItem value="">All Subjects</MenuItem>
                    {subjects.map(subject => (
                      <MenuItem key={subject.id} value={subject.id}>
                        {subject.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                <Typography variant="body2" sx={{ mt: 1, color: 'text.secondary' }}>
                  Showing {filteredPredictions.length} predictions ({activePredictions.length} active)
                </Typography>
              </Paper>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Paper sx={{ p: 2, textAlign: 'center' }}>
                <Typography variant="h4" color="primary" fontWeight="bold">
                  {activePredictions.length > 0 
                    ? Math.round((activePredictions.reduce((sum, p) => sum + p.probability, 0) / activePredictions.length) * 100)
                    : 0}%
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Average Prediction Confidence
                </Typography>
              </Paper>
            </Grid>
          </Grid>

          {filteredPredictions.length === 0 ? (
            <Alert severity="info">
              No predictions found. Click "Add Prediction" to create your first topic prediction.
            </Alert>
          ) : (
            <Grid container spacing={3}>
              {filteredPredictions.map((prediction, index) => (
                <Grid item xs={12} md={6} lg={4} key={prediction.id}>
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.05 }}
                  >
                    <Card sx={{ 
                      height: '100%', 
                      display: 'flex', 
                      flexDirection: 'column',
                      opacity: prediction.isActive ? 1 : 0.6,
                      border: prediction.isActive ? '2px solid transparent' : '2px dashed #ccc'
                    }}>
                      <CardContent sx={{ flexGrow: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Target size={20} color="#1976d2" />
                            <Typography variant="h6">
                              {prediction.topic}
                            </Typography>
                          </Box>
                          <IconButton
                            size="small"
                            onClick={() => handleToggleActive(prediction.id)}
                            color={prediction.isActive ? "primary" : "default"}
                          >
                            {prediction.isActive ? <Eye size={18} /> : <EyeOff size={18} />}
                          </IconButton>
                        </Box>
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                          <strong>Subject:</strong> {getSubjectName(prediction.subjectId)}
                        </Typography>
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                          <strong>Questions Available:</strong> {getTopicQuestionCount(prediction.subjectId, prediction.topic)}
                        </Typography>
                        
                        <Box sx={{ mb: 2 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                            <Typography variant="body2">Probability</Typography>
                            <Chip 
                              label={`${Math.round(prediction.probability * 100)}%`}
                              size="small"
                              color={getProbabilityColor(prediction.probability)}
                            />
                          </Box>
                          <LinearProgress 
                            variant="determinate" 
                            value={prediction.probability * 100} 
                            color={getProbabilityColor(prediction.probability)}
                            sx={{ height: 8, borderRadius: 4 }}
                          />
                          <Typography variant="caption" color="text.secondary">
                            {getProbabilityLabel(prediction.probability)} Confidence
                          </Typography>
                        </Box>
                        
                        <Typography variant="body2" color="text.secondary" paragraph>
                          <strong>Reasoning:</strong> {prediction.reasoning}
                        </Typography>
                        
                        <Typography variant="caption" color="text.secondary">
                          Created: {new Date(prediction.createdAt).toLocaleDateString()}
                        </Typography>
                      </CardContent>
                      
                      <CardActions sx={{ justifyContent: 'flex-end', pt: 0 }}>
                        <IconButton
                          size="small"
                          onClick={() => handleOpen(prediction)}
                          color="primary"
                        >
                          <Edit size={18} />
                        </IconButton>
                        <IconButton
                          size="small"
                          onClick={() => handleDelete(prediction.id)}
                          color="error"
                        >
                          <Trash2 size={18} />
                        </IconButton>
                      </CardActions>
                    </Card>
                  </motion.div>
                </Grid>
              ))}
            </Grid>
          )}
        </>
      )}

      {/* Add/Edit Prediction Dialog */}
      <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingPrediction ? 'Edit Prediction' : 'Add New Prediction'}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel>Subject</InputLabel>
                <Select
                  value={formData.subjectId}
                  onChange={(e) => setFormData({ ...formData, subjectId: e.target.value, topic: '' })}
                  label="Subject"
                  required
                >
                  {subjects.map(subject => (
                    <MenuItem key={subject.id} value={subject.id}>
                      {subject.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth disabled={!formData.subjectId}>
                <InputLabel>Topic</InputLabel>
                <Select
                  value={formData.topic}
                  onChange={(e) => setFormData({ ...formData, topic: e.target.value })}
                  label="Topic"
                  required
                >
                  {getSubjectTopics(formData.subjectId).map(topic => (
                    <MenuItem key={topic} value={topic}>
                      {topic} ({getTopicQuestionCount(formData.subjectId, topic)} questions)
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>
                Prediction Probability: {formData.probability}%
              </Typography>
              <Slider
                value={formData.probability}
                onChange={(_, newValue) => setFormData({ ...formData, probability: newValue as number })}
                min={10}
                max={100}
                step={5}
                marks={[
                  { value: 20, label: 'Low' },
                  { value: 50, label: 'Medium' },
                  { value: 75, label: 'High' },
                  { value: 95, label: 'Very High' }
                ]}
                valueLabelDisplay="auto"
                sx={{ mt: 2, mb: 3 }}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Reasoning"
                value={formData.reasoning}
                onChange={(e) => setFormData({ ...formData, reasoning: e.target.value })}
                multiline
                rows={4}
                required
                placeholder="Explain why this topic is predicted to appear in BECE 2026 (e.g., historical patterns, curriculum emphasis, current trends)"
              />
            </Grid>
            
            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Switch
                    checked={formData.isActive}
                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                  />
                }
                label="Active Prediction"
              />
              <Typography variant="caption" color="text.secondary" display="block">
                Only active predictions will be shown to students
              </Typography>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button 
            onClick={handleSave}
            variant="contained"
            disabled={!formData.subjectId || !formData.topic || !formData.reasoning}
          >
            {editingPrediction ? 'Update' : 'Create'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default PredictionManager;
